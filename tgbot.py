import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types # type: ignore
from aiogram.filters import Command, StateFilter # type: ignore
from aiogram.fsm.context import FSMContext # type: ignore
from aiogram.fsm.state import State, StatesGroup # type: ignore
from aiogram.fsm.storage.memory import MemoryStorage # type: ignore
from apscheduler.schedulers.asyncio import AsyncIOScheduler # type: ignore

BOT_TOKEN = "token"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

class NotificationStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_postpone = State()

notifications = {}
user_last_notification = {}  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def send_notification(user_id, notification_id):
    if notification_id in notifications:
        notification = notifications[notification_id]
        text = notification["text"]
       
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç")],
                [types.KeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω—É—Ç")],
                [types.KeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å")],
                [types.KeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞")],
            ],
            resize_keyboard=True
        )
       
        await bot.send_message(
            user_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
            reply_markup=keyboard
        )
       
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_last_notification[user_id] = notification_id

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚è∞ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def create_notification(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(NotificationStates.waiting_for_text)

@dp.message(StateFilter(NotificationStates.waiting_for_text))
async def process_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2023):"
    )
    await state.set_state(NotificationStates.waiting_for_date)

@dp.message(StateFilter(NotificationStates.waiting_for_date))
async def process_date(message: types.Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(date=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )
        await state.set_state(NotificationStates.waiting_for_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@dp.message(StateFilter(NotificationStates.waiting_for_time))
async def process_time(message: types.Message, state: FSMContext):
    try:
        time = datetime.strptime(message.text, "%H:%M").time()
        data = await state.get_data()
       
        notification_datetime = datetime.strptime(
            f"{data['date']} {message.text}",
            "%d.%m.%Y %H:%M"
        )
       
        if notification_datetime < datetime.now():
            await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
            return
       
        notification_id = f"{len(notifications)}_{message.from_user.id}"
       
        notifications[notification_id] = {
            "text": data["text"],
            "datetime": notification_datetime,
            "user_id": message.from_user.id,
            "original_datetime": notification_datetime  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        }
       
        scheduler.add_job(
            send_notification,
            'date',
            run_date=notification_datetime,
            args=[message.from_user.id, notification_id]
        )
       
        await message.answer(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {data['date']} –≤ {message.text}:\n"
            f"üìù –¢–µ–∫—Å—Ç: {data['text']}"
        )
        await state.clear()
       
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú")

@dp.message(lambda message: message.text.startswith("–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞"))
async def postpone_notification(message: types.Message):
    try:
        user_id = message.from_user.id
        if user_id not in user_last_notification:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())
            return
           
        notification_id = user_last_notification[user_id]
        if notification_id not in notifications:
            await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
            return
       
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
        parts = message.text.split()
        if len(parts) != 4:  # "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç" - 4 —á–∞—Å—Ç–∏
            raise ValueError
       
        num = int(parts[2])
        unit = parts[3]
       
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–ª—å—Ç—É –≤—Ä–µ–º–µ–Ω–∏
        if "–º–∏–Ω—É—Ç" in unit:
            delta = timedelta(minutes=num)
        elif "—á–∞—Å" in unit:
            delta = timedelta(hours=num)
        else:
            raise ValueError
       
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        notification = notifications[notification_id]
        new_time = datetime.now() + delta
       
        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        for job in scheduler.get_jobs():
            if job.args and len(job.args) >= 2 and job.args[1] == notification_id:
                job.remove()
       
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        scheduler.add_job(
            send_notification,
            'date',
            run_date=new_time,
            args=[user_id, notification_id],
            id=f"notify_{notification_id}"
        )
       
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        notification["datetime"] = new_time
        notifications[notification_id] = notification
       
        await message.answer(
            f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {parts[2]} {parts[3]}.\n"
            f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {new_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=types.ReplyKeyboardRemove()
        )
       
    except (ValueError, IndexError):
        await message.answer(
           "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
           "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç\n"
           "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω—É—Ç\n"
           "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å\n"
           "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 3 —á–∞—Å–∞",
           reply_markup=types.ReplyKeyboardRemove()
       )

async def on_startup():
    scheduler.start()
    now = datetime.now()
    for notification_id, notification in list(notifications.items()):
        if notification["datetime"] < now:
            await send_notification(notification["user_id"], notification_id)

async def on_shutdown():
    scheduler.shutdown()

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    asyncio.run(dp.start_polling(bot))
